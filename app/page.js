'use client';
import { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ SSR
const BusinessShowcase = dynamic(() => import('./components/BusinessShowcase'), { 
  ssr: false,
  loading: () => <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
});

const VoiceFeedback = dynamic(() => import('./components/VoiceFeedback'), { 
  ssr: false 
});

const SmartFAQ = dynamic(() => import('./components/SmartFAQ'), { 
  ssr: false 
});

const PersonalizationModule = dynamic(() => import('./components/PersonalizationModule'), { 
  ssr: false 
});

const LearningPlatform = dynamic(() => import('./components/LearningPlatform'), { 
  ssr: false 
});

const NeuralNetworkBackground = dynamic(() => import('./components/NeuralNetworkBackground'), { 
  ssr: false,
  loading: () => <div className="neural-bg-placeholder" style={{height: '100vh', background: 'linear-gradient(45deg, #1a1a2e, #16213e)'}}></div>
});

const AnalyticsDashboard = dynamic(() => import('./components/CRMAnalytics').then(mod => ({ default: mod.AnalyticsDashboard })), { 
  ssr: false 
});

const AdminPanel = dynamic(() => import('./components/AdminPanel'), { 
  ssr: false 
});

const AutomationStatus = dynamic(() => import('./components/ContentAutomation').then(mod => ({ default: mod.AutomationStatus })), { 
  ssr: false 
});

const UXTestingPanel = dynamic(() => import('./components/UXTestingPanel'), { 
  ssr: false 
});

const MobileTestPanel = dynamic(() => import('./components/MobileTestPanel'), { 
  ssr: false 
});

const SmokeTestPanel = dynamic(() => import('./components/SmokeTestPanel'), { 
  ssr: false 
});

const PerformancePanel = dynamic(() => import('./components/PerformancePanel'), { 
  ssr: false 
});

const ErrorLogPanel = dynamic(() => import('./components/ErrorLogPanel'), { 
  ssr: false 
});

// –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —à–∞–ø–∫–∞
function Navigation() {
  const [currentSection, setCurrentSection] = useState('hero');

  const menuItems = [
    { id: 'hero', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'üè†' },
    { id: 'showcase', label: '–£—Å–ª—É–≥–∏', icon: 'üéØ' },
    { id: 'calculator', label: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', icon: 'üí∞' },
    { id: 'faq', label: '–í–æ–ø—Ä–æ—Å—ã', icon: '‚ùì' },
    { id: 'contact', label: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', icon: 'üìû' }
  ];

  const scrollToSection = (id) => {
    const element = document.getElementById(id);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
      setCurrentSection(id);
    }
  };

  return (
    <nav className="main-navigation">
      <div className="nav-container">
        <div className="logo">
          <span className="logo-icon">üß†</span>
          <span className="logo-text">NeuroExpert</span>
        </div>
        
        <div className="nav-menu">
          {menuItems.map(item => (
            <button
              key={item.id}
              className={`nav-item ${currentSection === item.id ? 'active' : ''}`}
              onClick={() => scrollToSection(item.id)}
            >
              <span className="nav-icon">{item.icon}</span>
              <span className="nav-label">{item.label}</span>
            </button>
          ))}
        </div>
        
        <div className="nav-actions">
          <button className="nav-phone">üìû +7 (800) 555-35-35</button>
          <button className="nav-cta">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</button>
        </div>
      </div>
    </nav>
  );
}

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function ProgressIndicator() {
  const [scrollProgress, setScrollProgress] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      const totalHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = (window.scrollY / totalHeight) * 100;
      setScrollProgress(Math.min(progress, 100));
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <div className="progress-indicator">
      <div 
        className="progress-bar" 
        style={{ width: `${scrollProgress}%` }}
      />
    </div>
  );
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Hero-–±–ª–æ–∫
function HeroSection() {
  const [animationEnabled, setAnimationEnabled] = useState(true);

  const scrollToSection = (id) => {
    const element = document.getElementById(id);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <section id="hero" className="hero-section">
      <NeuralNetworkBackground animationEnabled={animationEnabled} />
      
      <div className="hero-content">
        <div className="hero-badge">
          üöÄ #1 –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –≤ –†–æ—Å—Å–∏–∏
        </div>
        
        <div className="hero-text">
          <h1 className="hero-title">
            –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
          </h1>
          
          <p className="hero-subtitle">
            –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –≤–Ω–µ–¥—Ä—è–µ–º —É–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. 
            –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π.
          </p>
          
          <div className="hero-benefits">
            <div className="benefit-item">
              <span className="benefit-icon">‚ö°</span>
              <span>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∑–∞ 1 –Ω–µ–¥–µ–ª—é</span>
            </div>
            <div className="benefit-item">
              <span className="benefit-icon">üìà</span>
              <span>ROI –æ—Ç 200% –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ</span>
            </div>
            <div className="benefit-item">
              <span className="benefit-icon">üõ°Ô∏è</span>
              <span>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</span>
            </div>
          </div>
          
          <div className="hero-cta">
            <button 
              className="cta-primary"
              onClick={() => scrollToSection('quiz')}
            >
              üéØ –£–∑–Ω–∞—Ç—å —Å–≤–æ—é –≤—ã–≥–æ–¥—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã
            </button>
            <button 
              className="cta-secondary"
              onClick={() => scrollToSection('showcase')}
            >
              üìä –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
            </button>
          </div>
          
          <div className="hero-trust">
            <span className="trust-text">–ù–∞–º –¥–æ–≤–µ—Ä—è—é—Ç:</span>
            <div className="trust-companies">
              <span>500+ –∫–æ–º–ø–∞–Ω–∏–π</span>
              <span>2M+ —Ä—É–±–ª–µ–π —Å—Ä–µ–¥–Ω–µ–≥–æ ROI</span>
              <span>98% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç</span>
            </div>
          </div>
        </div>
        
        <div className="hero-controls">
          <label className="animation-toggle">
            <input
              type="checkbox"
              checked={animationEnabled}
              onChange={(e) => setAnimationEnabled(e.target.checked)}
            />
            <span>üé¨ –ê–Ω–∏–º–∞—Ü–∏—è {animationEnabled ? '–≤–∫–ª' : '–≤—ã–∫–ª'}</span>
          </label>
        </div>
      </div>
    </section>
  );
}

// –ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function QuickQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [showResult, setShowResult] = useState(false);

  const questions = [
    {
      id: 'business_size',
      question: '–ö–∞–∫–æ–π —É –≤–∞—Å –±–∏–∑–Ω–µ—Å?',
      options: [
        { value: 'small', label: 'üè™ –ú–∞–ª—ã–π (–¥–æ 10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)', emoji: 'üë•' },
        { value: 'medium', label: 'üè¢ –°—Ä–µ–¥–Ω–∏–π (10-100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)', emoji: 'üë•üë•' },
        { value: 'large', label: 'üè≠ –ö—Ä—É–ø–Ω—ã–π (100+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)', emoji: 'üë•üë•üë•' }
      ]
    },
    {
      id: 'main_problem',
      question: '–ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?',
      options: [
        { value: 'leads', label: 'üìâ –ú–∞–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤', emoji: 'üòü' },
        { value: 'process', label: '‚öôÔ∏è –•–∞–æ—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö', emoji: 'ü§Ø' },
        { value: 'data', label: 'üìä –ù–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', emoji: 'üîç' },
        { value: 'costs', label: 'üí∏ –í—ã—Å–æ–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', emoji: 'üò∞' }
      ]
    },
    {
      id: 'budget',
      question: '–ì–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–µ?',
      options: [
        { value: 'low', label: 'üí∞ –î–æ 100 —Ç—ã—Å. —Ä—É–±.', emoji: 'üí∏' },
        { value: 'medium', label: 'üí∞ 100-500 —Ç—ã—Å. —Ä—É–±.', emoji: 'üí∞' },
        { value: 'high', label: 'üí∞ 500+ —Ç—ã—Å. —Ä—É–±.', emoji: 'üíé' }
      ]
    }
  ];

  const handleAnswer = (value) => {
    const newAnswers = { ...answers, [questions[currentQuestion].id]: value };
    setAnswers(newAnswers);
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResult(true);
    }
  };

  const calculateROI = () => {
    const baseROI = {
      small: { min: 200, max: 400 },
      medium: { min: 300, max: 600 },
      large: { min: 500, max: 1200 }
    };
    
    const size = answers.business_size || 'small';
    const roi = baseROI[size];
    
    return {
      min: roi.min,
      max: roi.max,
      avgMonthly: Math.round((roi.min + roi.max) / 2 * 1000),
      payback: size === 'small' ? 3 : size === 'medium' ? 6 : 9
    };
  };

  if (showResult) {
    const result = calculateROI();
    return (
      <section id="quiz" className="quiz-section">
        <div className="container">
          <div className="quiz-result">
            <h2>üéâ –í–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞:</h2>
            
            <div className="result-cards">
              <div className="result-card main">
                <h3>üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å</h3>
                <div className="big-number">{result.avgMonthly.toLocaleString()} ‚ÇΩ/–º–µ—Å</div>
              </div>
              
              <div className="result-card">
                <h4>üìà ROI</h4>
                <div className="number">{result.min}-{result.max}%</div>
              </div>
              
              <div className="result-card">
                <h4>‚è± –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å</h4>
                <div className="number">{result.payback} –º–µ—Å.</div>
              </div>
            </div>
            
            <div className="result-actions">
              <button className="cta-primary large">
                üìû –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ
              </button>
              <button className="cta-secondary" onClick={() => setShowResult(false)}>
                üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
              </button>
            </div>
            
            <div className="next-steps">
              <h3>üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
              <div className="steps">
                <div className="step">
                  <span className="step-number">1</span>
                  <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 30 –º–∏–Ω</span>
                </div>
                <div className="step">
                  <span className="step-number">2</span>
                  <span>–≠–∫—Å–ø—Ä–µ—Å—Å-–∞—É–¥–∏—Ç –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞</span>
                </div>
                <div className="step">
                  <span className="step-number">3</span>
                  <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    );
  }

  const currentQ = questions[currentQuestion];
  
  return (
    <section id="quiz" className="quiz-section">
      <div className="container">
        <div className="quiz-container">
          <div className="quiz-progress">
            <div className="progress-steps">
              {questions.map((_, index) => (
                <div 
                  key={index}
                  className={`step ${index <= currentQuestion ? 'active' : ''}`}
                />
              ))}
            </div>
            <span className="progress-text">
              –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
            </span>
          </div>
          
          <div className="quiz-content">
            <h2>{currentQ.question}</h2>
            
            <div className="quiz-options">
              {currentQ.options.map((option, index) => (
                <button
                  key={option.value}
                  className="quiz-option"
                  onClick={() => handleAnswer(option.value)}
                >
                  <span className="option-emoji">{option.emoji}</span>
                  <span className="option-text">{option.label}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

function Calculator() {
  const [currentStep, setCurrentStep] = useState(1);
  const [industry, setIndustry] = useState('');
  const [investment, setInvestment] = useState(500000);
  const [adBudget, setAdBudget] = useState(100000);
  
  // –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
  const multipliers = {
    retail: { saving: 2.5, revenue: 1.8, payback: 4, name: 'üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è' },
    manufacturing: { saving: 3.2, revenue: 2.1, payback: 6, name: 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' },
    services: { saving: 2.8, revenue: 2.3, payback: 3, name: 'üíº –£—Å–ª—É–≥–∏/–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥' },
    restaurant: { saving: 2.2, revenue: 1.9, payback: 5, name: 'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å' },
    logistics: { saving: 3.5, revenue: 2.0, payback: 8, name: 'üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞/–î–æ—Å—Ç–∞–≤–∫–∞' },
    finance: { saving: 3.8, revenue: 2.5, payback: 4, name: 'üí≥ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏' },
    healthcare: { saving: 3.0, revenue: 2.2, payback: 6, name: 'üè• –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ' },
    education: { saving: 2.6, revenue: 1.7, payback: 5, name: 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' }
  };

  const currentMultiplier = multipliers[industry];
  
  // –†–∞—Å—á–µ—Ç—ã ROI –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏
  const annualSaving = investment * (currentMultiplier?.saving || 0);
  const additionalRevenue = investment * (currentMultiplier?.revenue || 0) + adBudget * 2.5;
  const totalBenefit = annualSaving + additionalRevenue;
  const roi = ((totalBenefit - investment - adBudget) / (investment + adBudget)) * 100;
  const paybackMonths = currentMultiplier?.payback || 0;
  
  const formatNumber = (num) => {
    return new Intl.NumberFormat('ru-RU').format(Math.round(num));
  };

  const nextStep = () => {
    if (currentStep < 3) setCurrentStep(currentStep + 1);
  };

  const prevStep = () => {
    if (currentStep > 1) setCurrentStep(currentStep - 1);
  };

  return (
    <section id="calculator" className="calculator-section">
      <div className="container">
        <h2>üí∞ ROI‚Äë–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏</h2>
        
        <div className="calculator-steps">
          <div className="step-indicator">
            {[1, 2, 3].map(step => (
              <div key={step} className={`step ${currentStep >= step ? 'active' : ''}`}>
                {step}
              </div>
            ))}
          </div>
          
          {currentStep === 1 && (
            <div className="step-content">
              <h3>–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å</h3>
              <div className="industry-grid">
                {Object.entries(multipliers).map(([key, data]) => (
                  <button
                    key={key}
                    className={`industry-card ${industry === key ? 'selected' : ''}`}
                    onClick={() => setIndustry(key)}
                  >
                    {data.name}
                  </button>
                ))}
              </div>
              {industry && (
                <button className="step-btn" onClick={nextStep}>
                  –î–∞–ª–µ–µ ‚Üí
                </button>
              )}
            </div>
          )}
          
          {currentStep === 2 && (
            <div className="step-content">
              <h3>–®–∞–≥ 2: –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</h3>
              
              <div className="input-group">
                <label>–°—É–º–º–∞ –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é:</label>
                <input
                  type="range"
                  min="50000"
                  max="5000000"
                  step="50000"
                  value={investment}
                  onChange={(e) => setInvestment(Number(e.target.value))}
                />
                <span className="value">{formatNumber(investment)} ‚ÇΩ</span>
              </div>
              
              <div className="input-group">
                <label>–ë—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É (–º–µ—Å—è—á–Ω—ã–π):</label>
                <input
                  type="range"
                  min="10000"
                  max="500000"
                  step="10000"
                  value={adBudget}
                  onChange={(e) => setAdBudget(Number(e.target.value))}
                />
                <span className="value">{formatNumber(adBudget)} ‚ÇΩ</span>
              </div>
              
              <div className="step-navigation">
                <button className="step-btn secondary" onClick={prevStep}>
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
                <button className="step-btn" onClick={nextStep}>
                  –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ‚Üí
                </button>
              </div>
            </div>
          )}
          
          {currentStep === 3 && currentMultiplier && (
            <div className="step-content">
              <h3>–®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç</h3>
              
              <div className="results-grid">
                <div className="result-card">
                  <h4>üí∏ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h4>
                  <div className="result-value">{formatNumber(annualSaving)} ‚ÇΩ/–≥–æ–¥</div>
                </div>
                
                <div className="result-card">
                  <h4>üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–ø. –ø—Ä–∏–±—ã–ª—å</h4>
                  <div className="result-value">{formatNumber(additionalRevenue)} ‚ÇΩ/–≥–æ–¥</div>
                </div>
                
                <div className="result-card highlight">
                  <h4>üéØ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—ç—Ñ—Ñ–µ–∫—Ç</h4>
                  <div className="result-value">{formatNumber(totalBenefit)} ‚ÇΩ/–≥–æ–¥</div>
                </div>
                
                <div className="result-card">
                  <h4>‚ö° ROI</h4>
                  <div className="result-value">{Math.round(roi)}%</div>
                </div>
                
                <div className="result-card">
                  <h4>‚è∞ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏</h4>
                  <div className="result-value">{paybackMonths} –º–µ—Å.</div>
                </div>
              </div>
              
              <div className="roi-explanation">
                <details>
                  <summary>‚ùì –ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è ROI?</summary>
                  <p>
                    ROI —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (–û–±—â–∞—è –≤—ã–≥–æ–¥–∞ - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏) / –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ √ó 100%.
                    –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —ç–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –æ—Ç 
                    –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Å–∞–π—Ç–∞.
                  </p>
                </details>
              </div>
              
              <div className="step-navigation">
                <button className="step-btn secondary" onClick={prevStep}>
                  ‚Üê –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </button>
                <button className="step-btn primary">
                  üìû –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  );
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è AI-—É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
function ManagerSection() {
  const [q, setQ] = useState('');
  const [a, setA] = useState('');
  const [loading, setLoading] = useState(false);
  const [typing, setTyping] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);

  const typewriterEffect = (text) => {
    setA('');
    setTyping(true);
    let i = 0;
    const timer = setInterval(() => {
      setA(prev => prev + text.charAt(i));
      i++;
      if (i >= text.length) {
        clearInterval(timer);
        setTyping(false);
      }
    }, 30);
  };

  const ask = async () => {
    if (!q || loading) return;
    
    const userQuestion = q;
    setQ('');
    setLoading(true);
    setA('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    setChatHistory(prev => [...prev, { type: 'user', text: userQuestion }]);
    
    try {
      const res = await fetch('/.netlify/functions/assistant', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question: userQuestion }),
      });
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const data = await res.json();
      typewriterEffect(data.answer);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
      setTimeout(() => {
        setChatHistory(prev => [...prev, { type: 'assistant', text: data.answer }]);
      }, data.answer.length * 30 + 100);
      
    } catch (error) {
      console.error("Failed to fetch assistant's response:", error);
      const errorMessage = error.message.includes('500') 
        ? '‚ö†Ô∏è –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É GEMINI_API_KEY –≤ Netlify. –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FAQ –∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.'
        : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å FAQ.';
      
      typewriterEffect(errorMessage);
      setChatHistory(prev => [...prev, { type: 'assistant', text: errorMessage }]);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !loading && q.trim()) {
      ask();
    }
  };

  const quickQuestions = [
    "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
    "–ö–∞–∫–æ–π ROI —è –º–æ–≥—É –æ–∂–∏–¥–∞—Ç—å?",
    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ?",
    "–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –º–∞–ª–æ–º—É –±–∏–∑–Ω–µ—Å—É?",
    "–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é?"
  ];

  return (
    <section id="manager" className="manager-section">
      <div className="container">
        <div className="manager-content">
          <div className="manager-header">
            <div className="manager-avatar">
              <div className="avatar-ring"></div>
              <span className="avatar-emoji">üë®‚Äçüíº</span>
              <div className="online-status">‚óè</div>
            </div>
            
            <div className="manager-info">
              <h2>üéØ AI –£–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert</h2>
              <p>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞</p>
              <div className="manager-stats">
                <span className="stat">üìä 500+ –ø—Ä–æ–µ–∫—Ç–æ–≤</span>
                <span className="stat">‚ö° –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ 30 —Å–µ–∫</span>
                <span className="stat">üéØ 95% —Ç–æ—á–Ω–æ—Å—Ç—å</span>
              </div>
            </div>
          </div>

          <div className="chat-interface">
            {/* –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ */}
            {chatHistory.length > 0 && (
              <div className="chat-history">
                {chatHistory.map((message, index) => (
                  <div key={index} className={`chat-message ${message.type}`}>
                    <div className="message-avatar">
                      {message.type === 'user' ? 'üë§' : 'üë®‚Äçüíº'}
                    </div>
                    <div className="message-content">
                      {message.text}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç */}
            {(a || typing) && (
              <div className="current-response">
                <div className="response-header">
                  <span className="response-avatar">üë®‚Äçüíº</span>
                  <span className="response-title">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ:</span>
                </div>
                <div className="response-content">
                  {a}
                  {typing && <span className="typing-cursor">|</span>}
                </div>
              </div>
            )}

            {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
            <div className="quick-questions">
              <h4>üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</h4>
              <div className="questions-grid">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    className="quick-question"
                    onClick={() => setQ(question)}
                    disabled={loading}
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="input-section">
              <div className="input-wrapper">
                <input
                  type="text"
                  placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É..."
                  value={q}
                  onChange={(e) => setQ(e.target.value)}
                  onKeyPress={handleKeyPress}
                  disabled={loading}
                  className="question-input"
                />
                <button
                  onClick={ask}
                  disabled={loading || !q.trim()}
                  className="ask-button"
                >
                  {loading ? 'üîÑ' : 'üí¨'}
                </button>
              </div>
              
              <div className="input-help">
                üí° –°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏, ROI, —Å—Ä–æ–∫–∞—Ö –∏–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
              </div>
            </div>

            {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
            <div className="security-notice">
              <div className="security-icon">üîí</div>
              <div className="security-text">
                <strong>–ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö</strong>
                <div>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è AES-256 ‚Ä¢ GDPR ‚Ä¢ 152-–§–ó</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

// –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function ContactSection() {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    company: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      const response = await fetch('/.netlify/functions/contact-form', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          source: 'contact_form'
        }),
      });

      const data = await response.json();

      if (response.ok) {
        // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        alert(data.message);
        setFormData({ name: '', phone: '', company: '', message: '' });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if (typeof window !== 'undefined' && window.gtag) {
          window.gtag('event', 'form_submit', {
            event_category: 'engagement',
            event_label: 'contact_form'
          });
        }
      } else {
        // –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
        alert(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <section id="contact" className="contact-section">
      <div className="container">
        <div className="contact-content">
          <div className="contact-info">
            <h2>üìû –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h2>
            <p>
              –û–±—Å—É–¥–∏–º –≤–∞—à –±–∏–∑–Ω–µ—Å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ 
              –∏ —Å–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ò–ò.
            </p>
            
            <div className="contact-features">
              <div className="feature">
                <span className="feature-icon">‚ö°</span>
                <div>
                  <h4>–ë—ã—Å—Ç—Ä–æ</h4>
                  <p>–ü–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
                </div>
              </div>
              <div className="feature">
                <span className="feature-icon">üéØ</span>
                <div>
                  <h4>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ</h4>
                  <p>–†–µ—à–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å</p>
                </div>
              </div>
              <div className="feature">
                <span className="feature-icon">üí∞</span>
                <div>
                  <h4>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</h4>
                  <p>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç</p>
                </div>
              </div>
            </div>
            
            <div className="contact-methods">
              <a href="tel:+78005553535" className="contact-method">
                <span className="method-icon">üìû</span>
                <div>
                  <div className="method-title">–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å</div>
                  <div className="method-value">+7 (800) 555-35-35</div>
                </div>
              </a>
              
              <a href="mailto:hello@neuroexpert.ru" className="contact-method">
                <span className="method-icon">üìß</span>
                <div>
                  <div className="method-title">–ù–∞–ø–∏—Å–∞—Ç—å email</div>
                  <div className="method-value">hello@neuroexpert.ru</div>
                </div>
              </a>
            </div>
          </div>
          
          <div className="contact-form">
            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <input
                  type="text"
                  placeholder="–í–∞—à–µ –∏–º—è"
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  disabled={isSubmitting}
                  required
                />
              </div>
              
              <div className="form-group">
                <input
                  type="tel"
                  placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
                  value={formData.phone}
                  onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  disabled={isSubmitting}
                  required
                />
              </div>
              
              <div className="form-group">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                  value={formData.company}
                  onChange={(e) => setFormData({...formData, company: e.target.value})}
                  disabled={isSubmitting}
                />
              </div>
              
              <div className="form-group">
                <textarea
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –∏ –∑–∞–¥–∞—á–∞—Ö"
                  value={formData.message}
                  onChange={(e) => setFormData({...formData, message: e.target.value})}
                  disabled={isSubmitting}
                  rows="4"
                />
              </div>
              
              <button type="submit" className="submit-btn" disabled={isSubmitting}>
                {isSubmitting ? 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : 'üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ'}
              </button>
              
              <div className="form-note">
                –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
}

function FAQ() {
  const faqs = [
    {q: '–ó–∞ —Å–∫–æ–ª—å–∫–æ –æ–∫—É–ø–∞–µ—Ç—Å—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è?', a: '–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç—Ä–∞—Å–ª–∏: –æ—Ç 3 –¥–æ 8 –º–µ—Å—è—Ü–µ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.'},
    {q: '–ö–∞–∫–æ–π ROI –º–æ–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å?', a: '–°—Ä–µ–¥–Ω–∏–π ROI —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 150-350% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –∏ –±—é–¥–∂–µ—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.'},
    {q: '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç AI-—É–ø—Ä–∞–≤–ª—è—é—â–∏–π?', a: '–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.'},
    {q: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?', a: '–î–∞! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É AES-256, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç GDPR –∏ 152-–§–ó. –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.'},
    {q: '–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è?', a: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, CRM/ERP —Å–∏—Å—Ç–µ–º—ã, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, AI-—Ä–µ—à–µ–Ω–∏—è.'},
    {q: '–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –º–∞–ª–æ–º—É –±–∏–∑–Ω–µ—Å—É?', a: '–î–∞! –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –æ—Ç 100,000‚ÇΩ —É–∂–µ –¥–∞–µ—Ç –æ—â—É—Ç–∏–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.'}
  ];
  return (
    <div className="card">
      <h2>‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
      <div style={{fontSize: '14px', lineHeight: 1.6}}>
        {faqs.map((f, i) => (
          <div key={i} style={{marginBottom: 16, paddingBottom: 12, borderBottom: '1px solid rgba(255,255,255,0.1)'}}>
            <div style={{fontWeight: 'bold', marginBottom: 6, color: 'var(--accent)'}}>{f.q}</div>
            <div style={{color: 'var(--muted)'}}>{f.a}</div>
          </div>
        ))}
      </div>
    </div>
  );
}

function Popup() {
  const [show, setShow] = useState(false);
  
  return (
    <div>
      <button 
        onClick={() => setShow(true)} 
        style={{
          marginBottom: 10,
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          border: 'none',
          padding: '12px 24px',
          borderRadius: '25px',
          fontWeight: 'bold',
          cursor: 'pointer',
          boxShadow: '0 4px 15px rgba(102, 126, 234, 0.4)',
          transition: 'all 0.3s ease'
        }}
      >
        ‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–º–∏—É–º pop-up
      </button>
      
      {show && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          animation: 'fadeIn 0.3s ease'
        }}>
          <div style={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            color: 'white',
            padding: 40,
            borderRadius: 20,
            minWidth: 400,
            maxWidth: 500,
            textAlign: 'center',
            boxShadow: '0 20px 60px rgba(0,0,0,0.5)',
            position: 'relative',
            animation: 'slideIn 0.4s ease'
          }}>
            <div style={{fontSize: '48px', marginBottom: 20}}>üéâ</div>
            <h3 style={{margin: '0 0 16px', fontSize: '24px', fontWeight: 'bold'}}>
              üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroExpert!
            </h3>
            <p style={{margin: '0 0 24px', fontSize: '16px', lineHeight: 1.6, opacity: 0.9}}>
              –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–∞ –∏ ROI-—Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞! 
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
            </p>
            <div style={{
              background: 'rgba(255,255,255,0.1)',
              padding: 16,
              borderRadius: 12,
              marginBottom: 24,
              fontSize: '14px'
            }}>
              ‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ ‚Äî —Ç–æ—á–Ω—ã–π ROI –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º<br/>
              ‚úÖ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –±–∏–∑–Ω–µ—Å—É<br/>
              ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ ‚Äî —Å—Ä–æ–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π<br/>
              ‚úÖ –û—Ç—Ä–∞—Å–ª–µ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ 5 —Å—Ñ–µ—Ä–∞–º –±–∏–∑–Ω–µ—Å–∞
            </div>
            <button 
              onClick={() => setShow(false)}
              style={{
                background: 'rgba(255,255,255,0.2)',
                color: 'white',
                border: '2px solid rgba(255,255,255,0.3)',
                padding: '12px 32px',
                borderRadius: '25px',
                fontWeight: 'bold',
                cursor: 'pointer',
                transition: 'all 0.2s ease'
              }}
            >
              üéØ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!
            </button>
          </div>
        </div>
      )}
      
      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        @keyframes slideIn {
          from { opacity: 0; transform: translateY(-50px) scale(0.9); }
          to { opacity: 1; transform: translateY(0) scale(1); }
        }
      `}</style>
    </div>
  );
}

export default function HomePage() {
  const [activeTab, setActiveTab] = useState('main');

  if (activeTab === 'main') {
    return (
      <div className="app">
        <Navigation />
        <ProgressIndicator />
        <HeroSection />
        
        <main className="main-content">
          <QuickQuiz />
          <BusinessShowcase />
          <Calculator />
          <ManagerSection />
          <SmartFAQ />
          <ContactSection />
        </main>
        
        <VoiceFeedback />
        
        {/* –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫—Ä—ã—Ç—ã –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ */}
        <div className="admin-access" style={{position: 'fixed', bottom: '10px', right: '10px', opacity: 0.1}}>
          <button onClick={() => setActiveTab('admin')} title="–ê–¥–º–∏–Ω–∫–∞">‚öôÔ∏è</button>
        </div>
      </div>
    );
  }

  if (activeTab === 'admin') {
    return (
      <div className="admin-app">
        <AdminPanel />
        <button className="back-btn" onClick={() => setActiveTab('main')}>
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç
        </button>
      </div>
    );
  }

  if (activeTab === 'analytics') {
    return (
      <div className="analytics-app">
        <AnalyticsDashboard />
        <AutomationStatus />
        <button className="back-btn" onClick={() => setActiveTab('main')}>
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç
        </button>
      </div>
    );
  }

  if (activeTab === 'testing') {
    return (
      <div className="testing-app">
        <UXTestingPanel />
        <MobileTestPanel />
        <SmokeTestPanel />
        <PerformancePanel />
        <ErrorLogPanel />
        <button className="back-btn" onClick={() => setActiveTab('main')}>
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç
        </button>
      </div>
    );
  }

  return null;
}
