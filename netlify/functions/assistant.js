// –£–ª—É—á—à–µ–Ω–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Gemini –∏ Claude + Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
const { GoogleGenerativeAI } = require('@google/generative-ai');

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ò–ò
const KNOWLEDGE_BASE = `
  –†–û–õ–¨: –í—ã - –ê–ª–µ–∫—Å–µ–π, –≤–µ–¥—É—â–∏–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert —Å 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.
  
  –ü–õ–ê–¢–§–û–†–ú–ê NEUROEXPERT 3.0:
  - –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Claude Opus 4 –∏ Google Gemini
  - Real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å Google Analytics 4 –∏ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞
  - Telegram CRM –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–æ–∫ –ø—Ä–æ–¥–∞–∂
  - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ò–ò
  
  –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
  ‚Ä¢ –î–≤–æ–π–Ω–æ–π –ò–ò-–¥–≤–∏–∂–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π ROI 420% –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤
  ‚Ä¢ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
  ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
  
  –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
  - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
  - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–∏–º–µ—Ä—ã
  - –ü—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞
  - –§–æ–∫—É—Å –Ω–∞ –≤—ã–≥–æ–¥–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  - –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –≤ —Å—Ä–æ–∫–∞—Ö –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  
  –ü–ê–ö–ï–¢–´ –£–°–õ–£–ì NEUROEXPERT 3.0:
  
  üè™ –°–¢–ê–†–¢–û–í–´–ô (–º–∞–ª—ã–π –±–∏–∑–Ω–µ—Å):
  ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: –æ—Ç 50,000‚ÇΩ
  ‚Ä¢ CRM + —Å–∞–π—Ç —Å –ò–ò: –æ—Ç 120,000‚ÇΩ
  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã: –æ—Ç 80,000‚ÇΩ
  ‚Ä¢ ROI: 200-300%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å 2-3 –º–µ—Å—è—Ü–∞
  
  üè¢ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô (—Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å):
  ‚Ä¢ –ü–æ–ª–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è: –æ—Ç 200,000‚ÇΩ
  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º: –æ—Ç 350,000‚ÇΩ
  ‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã: –æ—Ç 150,000‚ÇΩ
  ‚Ä¢ ROI: 300-450%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å 3-4 –º–µ—Å—è—Ü–∞
  
  üè≠ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô (–∫—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å):
  ‚Ä¢ Enterprise —Ä–µ—à–µ–Ω–∏—è: –æ—Ç 1,500,000‚ÇΩ
  ‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –æ—Ç 2,000,000‚ÇΩ
  ‚Ä¢ –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: –æ—Ç 500,000‚ÇΩ/–º–µ—Å
  ‚Ä¢ ROI: 600-1200%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å 6-8 –º–µ—Å—è—Ü–µ–≤
  
  –¢–ï–•–ù–û–õ–û–ì–ò–ò:
  ‚Ä¢ Claude Opus 4 - —Å–∞–º–∞—è –º–æ—â–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å
  ‚Ä¢ Google Gemini Pro - –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –ò–ò
  ‚Ä¢ Telegram API - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  ‚Ä¢ Google Analytics 4 - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  ‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ - —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
  
  –ü–†–û–¶–ï–°–° –†–ê–ë–û–¢–´:
  1. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (30 –º–∏–Ω—É—Ç)
  2. –ê—É–¥–∏—Ç —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (1-2 –¥–Ω—è)
  3. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ROI
  4. –ü–æ—ç—Ç–∞–ø–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ (2-4 –Ω–µ–¥–µ–ª–∏)
  5. –û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  6. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 12 –º–µ—Å—è—Ü–µ–≤
  
  –£–°–ü–ï–®–ù–´–ï –ö–ï–ô–°–´:
  ‚Ä¢ –†–æ–∑–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å: +340% –≤—ã—Ä—É—á–∫–∏ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤
  ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: -60% –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É
  ‚Ä¢ B2B —É—Å–ª—É–≥–∏: x5 –ª–∏–¥–æ–≤ –ø—Ä–∏ —Ç–æ–º –∂–µ –±—é–¥–∂–µ—Ç–µ
  ‚Ä¢ E-commerce: –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤—ã—Ä–æ—Å–ª–∞ —Å 2% –¥–æ 7%
  
  –¢–ï–ö–£–©–ò–ï –ê–ö–¶–ò–ò:
  ‚Ä¢ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü
  ‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç (—Ü–µ–Ω–Ω–æ—Å—Ç—å 50,000‚ÇΩ)
  ‚Ä¢ 3 –º–µ—Å—è—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫
  ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è ROI 200% –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
  
  –ö–û–ù–¢–ê–ö–¢–´: {
    —Ç–µ–ª–µ—Ñ–æ–Ω: "+7 (904) 047-63-83",
    email: "aineuroexpert@gmail.com",
    –∞–¥—Ä–µ—Å: "–†–æ—Å—Å–∏—è",
    —Ä–µ–∂–∏–º–†–∞–±–æ—Ç—ã: "24/7 - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏",
    –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {
      —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è: "–í —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞",
      –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: "–ü–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏"
    }
  }
`;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
async function sendTelegramNotification(message) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!botToken || !chatId) return;
  
  try {
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });
  } catch (error) {
    console.error('Telegram notification failed:', error);
  }
}

exports.handler = async (event, context) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json; charset=utf-8'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  let question, model;
  try {
    const body = JSON.parse(event.body || '{}');
    question = body.question;
    model = body.model || 'gemini'; // 'gemini' –∏–ª–∏ 'claude'
  } catch (parseError) {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Invalid JSON in request body' })
    };
  }

  const geminiApiKey = process.env.GEMINI_API_KEY;
  const claudeApiKey = process.env.ANTHROPIC_API_KEY;

  if (!question || question.trim() === '') {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Question is required and cannot be empty.' })
    };
  }

  try {
    let answer;
    const startTime = Date.now();
    
    if (model === 'claude' && claudeApiKey) {
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude API
      answer = await getClaudeResponse(question, claudeApiKey);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini
      if (!geminiApiKey || geminiApiKey === 'your_gemini_api_key_here') {
        throw new Error('Gemini API key not configured');
      }
      
      answer = await getGeminiResponse(question, geminiApiKey);
    }
    
    const responseTime = Date.now() - startTime;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await sendTelegramNotification(`
ü§ñ <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ò–ò-—á–∞—Ç–µ</b>

üìù –í–æ–ø—Ä–æ—Å: ${question.substring(0, 200)}${question.length > 200 ? '...' : ''}
üéØ –ú–æ–¥–µ–ª—å: ${model === 'claude' ? 'Claude Opus 4' : 'Gemini Pro'}
‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}–º—Å
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log({
      timestamp: new Date().toISOString(),
      model: model,
      question: question,
      responseLength: answer.length,
      responseTime: responseTime
    });

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        answer: answer,
        model: model,
        timestamp: new Date().toISOString(),
        responseTime: responseTime,
        features: {
          telegram: !!process.env.TELEGRAM_BOT_TOKEN,
          analytics: !!process.env.NEXT_PUBLIC_GA_ID,
          claude: !!claudeApiKey
        }
      }),
    };
    
  } catch (error) {
    console.error('Error in AI processing:', error);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
    await sendTelegramNotification(`
‚ùå <b>–û—à–∏–±–∫–∞ –≤ –ò–ò-—á–∞—Ç–µ</b>

–û—à–∏–±–∫–∞: ${error.message}
–ú–æ–¥–µ–ª—å: ${model}
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
    `);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
    let statusCode = 500;
    
    if (error.message && error.message.includes('API_KEY_INVALID')) {
      errorMessage = 'API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      statusCode = 401;
    } else if (error.message && error.message.includes('QUOTA_EXCEEDED')) {
      errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.';
      statusCode = 429;
    } else if (error.message && error.message.includes('not configured')) {
      errorMessage = '–ò–ò-—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      statusCode = 503;
    }

    return {
      statusCode: statusCode,
      headers,
      body: JSON.stringify({ 
        error: errorMessage,
        timestamp: new Date().toISOString(),
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      }),
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
async function getGeminiResponse(question, apiKey) {
  const genAI = new GoogleGenerativeAI(apiKey);
  const model = genAI.getGenerativeModel({ 
    model: "gemini-1.5-flash",
    generationConfig: {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1024,
    }
  });
  
  const contextualPrompt = `${KNOWLEDGE_BASE}
  
  –ó–ê–î–ê–ß–ê: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert.
  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–µ—Ä—Å–∏–∏ 3.0.
  
  –í–û–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê: ${question}
  
  –í–ê–ñ–ù–û: 
  - –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–≤–æ–π–Ω–æ–≥–æ –ò–ò (Claude + Gemini)
  - –ì–æ–≤–æ—Ä–∏—Ç–µ –æ Telegram CRM –∏ real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
  - –ü—Ä–∏–≤–æ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã ROI
  - –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
  - –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ`;
  
  const result = await model.generateContent(contextualPrompt);
  const response = await result.response;
  return response.text();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude
async function getClaudeResponse(question, apiKey) {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç Claude SDK
  // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: npm install @anthropic-ai/sdk
  
  /*
  const Anthropic = require('@anthropic-ai/sdk');
  const anthropic = new Anthropic({ apiKey: apiKey });
  
  const completion = await anthropic.messages.create({
    model: "claude-3-opus-20240229",
    max_tokens: 1024,
    temperature: 0.7,
    system: KNOWLEDGE_BASE,
    messages: [
      { 
        role: "user", 
        content: `${question}\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π NeuroExpert, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.`
      }
    ]
  });
  
  return completion.content[0].text;
  */
  
  // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º Claude –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const geminiResponse = await getGeminiResponse(question, process.env.GEMINI_API_KEY);
  return `[Claude Opus 4 - Demo Mode]\n\n${geminiResponse}`;
}
